let md5,makeid,port,secure;_47f‍.w("./functions.js",[["md5",["md5"],function(v){md5=v}],["makeid",["makeid"],function(v){makeid=v}]]);_47f‍.w("./settings.js",[["port",["port"],function(v){port=v}],["secure",["secure"],function(v){secure=v}]]);


const express = _47f‍.t("require")('express');
const bodyParser = _47f‍.t("require")('body-parser');
const app = new express();
const ytdl = _47f‍.t("require")('ytdl-core')
const fs = _47f‍.t("require")('fs')
const session = _47f‍.t("require")('express-session');
const crypto = _47f‍.t("require")('crypto');
app.use(session(
{
    secret: md5('thisisasecuresecret!!!1293898HHkwejk++'),
    cookie: {
        secure: secure,
        maxAge: 5184000000 // 60 days
    }
}
));
app.use(bodyParser.urlencoded({ extended: true }));
app.use( bodyParser.json() );

rooms = {};

app.get('/', function(req, res){
    res.sendFile(_47f‍.t("__dirname") + '/sites/index.html');
});

app.post('/createroom/', (req, res) => {
    var id = makeid();
    rooms.id = {video:'', times:[]};
    res.redirect('/room/' + id);
});

app.post('/playerchange', (req, res) => {
    var type = req.body.type;
    var id = req.session.id;
    switch(type) {
        case 'newVideo':
            rooms.id.video = req.body.video;
            break;
    }
});

app.get('/room/:id', (req, res) => {
    var id = req.params.id;
    ses = req.session;
    ses.id = id;
    res.sendFile('/sites/room.html', { root: __dirname });
});

app.get('/js/:name', function(req, res) {
    var name = req.params.name;
    res.sendFile('/js/' + name, { root: __dirname });
});

app.get('/css/:name', function(req, res) {
    var name = req.params.name;
    res.sendFile('/css/' + name, { root: __dirname });
});

app.get("/video/:rand", function (req, res) {
    var id = req.session.id;
    var video = rooms.id.video;
    _47f‍.g.console.log(req.session.id)
    if(!video) {
        video = "https://www.youtube.com/watch?v=Obgnr9pc820";
    }
    if(fs.existsSync('downloads/' + md5(video))) {
        resPartial(res);
    } else {
        var myFile = fs.createWriteStream('downloads/' + md5(video));
        ytdl(video)
        .on("response", response => {
            _47f‍.g.console.log(response.headers["content-length"]);
        })
        .pipe(myFile)
        .on("finish", () => {
            resPartial(res);
        });
    }
  });

function resPartial(res) {
var file = 'downloads/' + md5(video);
fs.stat(file, function(err, stats) {
    if (err) {
        if (err.code === 'ENOENT') {
        return res.sendStatus(404);
        }
        res.end(err);
    }
    var range = req.headers.range;
    if (!range) {
        return res.sendStatus(416);
    }
    var positions = range.replace(/bytes=/, "").split("-");
    var start = parseInt(positions[0], 10);
    var total = stats.size;
    var end = positions[1] ? parseInt(positions[1], 10) : total - 1;
    var chunksize = (end - start) + 1;

    res.writeHead(206, {
        "Content-Range": "bytes " + start + "-" + end + "/" + total,
        "Accept-Ranges": "bytes",
        "Content-Length": chunksize,
        "Content-Type": "video/mp4"
    });

    var stream = fs.createReadStream(file, { start: start, end: end })
        .on("open", function() {
        stream.pipe(res);
        }).on("error", function(err) {
        res.end(err);
        });
});
}

app.listen(port, () => {})
  
